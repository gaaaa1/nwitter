[{"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\index.js":"1","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\App.js":"2","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Home.js":"4","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Auth.js":"5","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\fBase.js":"6","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Navigation.js":"7","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Nweet.js":"9"},{"size":206,"mtime":1609595448935,"results":"10","hashOfConfig":"11"},{"size":1203,"mtime":1613146199530,"results":"12","hashOfConfig":"11"},{"size":1104,"mtime":1613145849799,"results":"13","hashOfConfig":"11"},{"size":3675,"mtime":1612695653176,"results":"14","hashOfConfig":"11"},{"size":2797,"mtime":1609668030207,"results":"15","hashOfConfig":"11"},{"size":804,"mtime":1612671012953,"results":"16","hashOfConfig":"11"},{"size":419,"mtime":1612697053914,"results":"17","hashOfConfig":"11"},{"size":1678,"mtime":1613145914319,"results":"18","hashOfConfig":"11"},{"size":2627,"mtime":1612677078928,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"j5eb3m",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\index.js",[],["41","42"],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\App.js",["43","44"],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Router.js",[],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Home.js",["45"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Nweet from \"../components/Nweet\";\r\nimport { dbService, storageService } from \"../fBase\";\r\n\r\nconst Home = ({ userObj }) => {\r\n\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [nweets, setNweets] = useState([]);\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        //nweets firebase�� �����Ͱ� ���Ҷ����� ����� (��ȭ�� ����)\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id: doc.id, ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, []);\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(userObj.uid + '/' + uuidv4());\r\n            const reponse = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await reponse.ref.getDownloadURL();\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        };\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setNweet(value);\r\n    };\r\n    const onFileChange = (event) => {\r\n        // file�� �о���� �о�� ���ϵ��� �迭�� �������\r\n        const {\r\n            target: { files },\r\n        } = event;\r\n        const theFile = files[0]; //�������� �����ص� �ϳ��� �о���� ����\r\n                                  //console.log(files) �ؼ� ���� �迭�� ��������\r\n        const reader = new FileReader();  //������ �о�� ��ü ����\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {\r\n                // ���������� �о�� ������ �迭���� ������ url ���� �������ִ� result�� ã��\r\n                currentTarget: { result },\r\n            } = finishedEvent;\r\n            // �о�� ���� url�� Attachment�� �־���\r\n            setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);  // ������ url�� ���� �о��\r\n\r\n    }\r\n\r\n    const onClearAttachmentClick = () => {\r\n        //���ε�� ������ ����� ���\r\n        //���� �ּҸ� �������ִ� attachment�� null ������ ����\r\n        setAttachment(null);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                {/* nweet �Է� �� */}\r\n                <input\r\n                    value={nweet}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                />\r\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange}/>\r\n                <input type=\"submit\" value=\"Nweet\" />\r\n                {attachment && (\r\n                    <div>\r\n                        <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                        <button onClick={ onClearAttachmentClick }>clear</button>\r\n                    </div>\r\n                )}\r\n            </form>\r\n            <div>\r\n                {nweets.map((nweet) => (\r\n                    <Nweet\r\n                        key={nweet.id}\r\n                        nweetObj={nweet}\r\n                        isOwner={nweet.creatorId === userObj.uid}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Auth.js",[],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\fBase.js",[],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\routes\\Profile.js",["46","47"],"C:\\Users\\SAMSUNG\\Source\\Repos\\nomadecoder\\nwitter\\src\\components\\Nweet.js",["48"],"import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"../fBase\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);      // edit�� ����ϴ��� ���ϴ��� ���� (true or false)\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);    //������ ������ ������Ʈ�ϱ� ���� �뵵\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        if (ok) {\r\n            //delete\r\n            await dbService.doc(\"nweets/\" + nweetObj.id).delete();  //document.collection/nweetsID.delete\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n        }\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(nweetObj, newNweet)\r\n        await dbService.doc(\"nweets/\" + nweetObj.id).update({\r\n            text:newNweet,\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange = (event) => {\r\n        const { value } = event.target;\r\n        setNewNweet(value);\r\n    };\r\n    return (\r\n        <div>\r\n            {\r\n                editing ? (\r\n                    <>\r\n                        <form onSubmit={onSubmit}> \r\n                            {/* nweet ���� �� */}\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Edit your nweet\"\r\n                                value={newNweet}\r\n                                onChange={onChange}\r\n                                required\r\n                            />\r\n                            <input type=\"submit\" value=\"Update Nweet\" />\r\n                        </form>\r\n                        <button onClick={toggleEditing}>Cancel</button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            {/* nweet �����ƴ� ��� �Ϲ����� �ǽð� nweet�� ������ */}\r\n                            <h4>{nweetObj.text}</h4>\r\n                            {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} width = \"50px\" height=\"50px\" />}\r\n                            {isOwner && (\r\n                                <>\r\n                                    <button onClick={onDeleteClick}>Delete Nweet</button>\r\n                                    <button onClick={toggleEditing}>Edit Nweet</button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nweet;",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":7,"column":12,"nodeType":"55","messageId":"56","endLine":7,"endColumn":22},{"ruleId":"53","severity":1,"message":"57","line":7,"column":24,"nodeType":"55","messageId":"56","endLine":7,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":90,"column":25,"nodeType":"60","endLine":90,"endColumn":76},{"ruleId":"61","severity":1,"message":"62","line":5,"column":1,"nodeType":"63","endLine":52,"endColumn":2},{"ruleId":"64","severity":1,"message":"65","line":16,"column":8,"nodeType":"66","endLine":16,"endColumn":10,"suggestions":"67"},{"ruleId":"58","severity":1,"message":"59","line":51,"column":56,"nodeType":"60","endLine":51,"endColumn":121},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'setIsLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyNweets'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [getMyNweets]",{"range":"73","text":"74"},[697,699],"[getMyNweets]"]